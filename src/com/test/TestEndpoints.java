package com.test;

import java.util.HashMap;
import java.util.Map;

import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.github.javafaker.Faker;
import com.google.gson.Gson;

import api.engine.endpoints.UserEndpoints;
import api.payload.User;
import io.restassured.response.Response;

public class TestEndpoints {
	Faker faker;
	User userpayload;
	@BeforeTest
	public void beforeTest()
	{
		System.out.println("username under test");
		faker=new Faker();
		userpayload=new User();
		userpayload.setUserId(faker.idNumber().hashCode());
		userpayload.setUserName(faker.name().username());
		userpayload.setFirstName(faker.name().firstName());
		userpayload.setLastName(faker.name().lastName());
		userpayload.setEmail(faker.internet().safeEmailAddress());
		userpayload.setPassword(faker.internet().password(5, 10));
		userpayload.setPhone(faker.phoneNumber().cellPhone());
		System.out.println("Random usernames generated by the faker"+userpayload.getUserName());
		System.out.println();
	}
	@Test(priority=1)
	public void testPostUser() {
		Map<String,Object> bodyparams=new HashMap<String,Object>();
		bodyparams.put("id", userpayload.getUserId());
		bodyparams.put("username",userpayload.getUserName());
		bodyparams.put("firstname", userpayload.getFirstName());
		bodyparams.put("lastname", userpayload.getLastName());
		bodyparams.put("email", userpayload.getEmail());
		bodyparams.put("password", userpayload.getPassword());
		bodyparams.put("phone", userpayload.getPhone());
		bodyparams.put("uderstatus",0);
		String payload=new Gson().toJson(bodyparams);
		System.out.println("post");
		Response response=UserEndpoints.createUser(payload);
		response.then().log().all();
		Assert.assertEquals(response.getStatusCode(), 200);
		Assert.assertTrue(response.getStatusLine().contains("OK"));
		System.out.println(""+this.userpayload.getUserName()+"is created");
	}
	@Test(priority=2)
	public void testGetUserByName() {
		System.out.println("get");
		Response response=UserEndpoints.readUser(this.userpayload.getUserName());
		response.then().log().body().statusCode(200);
		System.out.println(""+this.userpayload.getUserName()+"is fetched");
	}
	@Test(priority=3)
	public void testUpdateUsernameByName() {
	Map<String,Object> bodyparams=new HashMap<String,Object>();
	bodyparams.put("id", userpayload.getUserId());
	bodyparams.put("username", userpayload.getUserName());
	bodyparams.put("firstname", userpayload.getFirstName());
	bodyparams.put("lastname", userpayload.getLastName());
	bodyparams.put("email", userpayload.getEmail());
	bodyparams.put("password", userpayload.getPassword());
	bodyparams.put("phone", userpayload.getPhone());
	bodyparams.put("userstatus", 1);
	String payload=new Gson().toJson(bodyparams);
	System.out.println("update");
	Response response=UserEndpoints.updateUser(this.userpayload.getUserName(), payload);
	response.then().log().body().statusCode(200);
	Response afterUpdateResponse=UserEndpoints.readUser(this.userpayload.getUserName());
	afterUpdateResponse.then().log().body().statusCode(200);
	System.out.println(""+this.userpayload.getUserName()+"is updated");
	}
	@Test(priority=4)
	public void testDeleteUsernameByName() {
		System.out.println("Delete");
		Response response=UserEndpoints.deleteUser(this.userpayload.getUserName());
		response.then().log().body().statusCode(200);
		System.out.println(""+this.userpayload.getUserName()+"is deleted");
	}
}